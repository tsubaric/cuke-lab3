##################################################################################################################################################
############################################################### TEST CASES #######################################################################
##################################################################################################################################################

################################################################################################################################################## Simple [+]
def test1():
    A = Tensor('a', (30, 30))
    B = Tensor('b', (30, 30))
    C = Tensor('c', (30, 30))
    D = Tensor('d', (30, 30))
    E = Tensor('e', (30, 30))

    res1 = A + B 
    res2 = C + D
    res = res1 + res2 + E
    res_with_ir = gen_ir(res)
    code0 = codegen.cpu.gen_cpp(res_with_ir)
    
    print("===============================================================> res_with_ir [IR]")
    print(code0)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)
    
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 1)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 1)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Simple [+]
def test2():
    A = Tensor('a', (30, 30))
    B = Tensor('b', (30, 30))
    C = Tensor('c', (30, 30))
    D = Tensor('d', (30, 30))
    E = Tensor('e', (30, 30))
    F = Tensor('f', (30, 30))

    res1 = A + B
    res2 = C + D
    res3 = E + F
    res0 = res1 + res2
    res = res0 + res3
    res_with_ir = gen_ir(res)
    code0 = codegen.cpu.gen_cpp(res_with_ir)
    
    print("===============================================================> res_with_ir [IR]")
    print(code0)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)
    
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 2)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 2)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Simple [- and /]
def test3():
    A = Tensor('a', (30, 30))
    B = Tensor('b', (30, 30))
    C = Tensor('c', (30, 30))
    D = Tensor('d', (30, 30))
    E = Tensor('e', (30, 30))
    F = Tensor('f', (30, 30))

    res1 = A - B
    res2 = C // D
    res3 = E - F
    res0 = res1 + res2
    res = res0 + res3
    res_with_ir = gen_ir(res)
    code0 = codegen.cpu.gen_cpp(res_with_ir)
    
    print("===============================================================> res_with_ir [IR]")
    print(code0)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)
    
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 3)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 3)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Not all loops bound are equal Simple [+]
def test4():
    A = Tensor('a', (30, 30))
    B = Tensor('b', (30, 30))
    C = Tensor('c', (30, 30))
    D = Tensor('d', (30, 30))

    res1 = A + B
    res2 = C * D

    res = res1 + res2
    res_with_ir = gen_ir(res)
    code0 = codegen.cpu.gen_cpp(res_with_ir)
    
    print("===============================================================> res_with_ir [IR]")
    print(code0)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)
    
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 4)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 4)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## From Notion
def test5():
    A = Tensor('a', (10, 20))
    B = Tensor('b', (20, 30))
    C = Tensor('c', (10, 30))

    res1 = A @ B # 20, 40
    res = res1 + C
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)
    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 5)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 5)")
    PrintCCode(new_res_with_ir.compute)

##################################################################################################################################################  From Notion Equal Bounds
def test6():
    A = Tensor('a', (20, 20))
    B = Tensor('b', (20, 20))
    C = Tensor('c', (20, 20))

    res1 = A @ B # 20, 40
    res = res1 + C
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)
    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 6)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 6)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Simple [*]
def test7():
    A = Tensor('a', (20, 20))
    B = Tensor('b', (20, 20))
    C = Tensor('c', (20, 20))

    res1 = A * B # 20, 40
    res = res1 + C
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)
    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 7)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 7)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Simple [-]
def test8():
    A = Tensor('a', (30, 30))
    B = Tensor('b', (30, 30))
    C = Tensor('c', (30, 30))
    D = Tensor('d', (30, 30))
    E = Tensor('e', (30, 30))
    F = Tensor('f', (30, 30))

    res1 = A - B
    res2 = C - D
    res3 = E - F
    res0 = res1 + res2
    res = res0 + res3
    res_with_ir = gen_ir(res)
    code0 = codegen.cpu.gen_cpp(res_with_ir)
    
    print("===============================================================> res_with_ir [IR]")
    print(code0)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)
    
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 8)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 8)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Simple [/]
def test9():
    A = Tensor('a', (30, 30))
    B = Tensor('b', (30, 30))
    C = Tensor('c', (30, 30))
    D = Tensor('d', (30, 30))
    E = Tensor('e', (30, 30))
    F = Tensor('f', (30, 30))

    res1 = A // B
    res2 = C // D
    res3 = E // F
    res0 = res1 + res2
    res = res0 + res3
    res_with_ir = gen_ir(res)
    code0 = codegen.cpu.gen_cpp(res_with_ir)
    
    print("===============================================================> res_with_ir [IR]")
    print(code0)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)
    
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 9)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 9)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Simple [*]
def test10():
    A = Tensor('a', (30, 30))
    B = Tensor('b', (30, 30))
    C = Tensor('c', (30, 30))
    D = Tensor('d', (30, 30))
    E = Tensor('e', (30, 30))
    F = Tensor('f', (30, 30))

    res1 = A * B
    res2 = C * D
    res3 = E * F
    res0 = res1 + res2
    res = res0 + res3
    res_with_ir = gen_ir(res)
    code0 = codegen.cpu.gen_cpp(res_with_ir)
    
    print("===============================================================> res_with_ir [IR]")
    print(code0)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)
    
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 10)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 10)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Scalar Operation
def test11():
    A = Tensor('a', (30, 30))
    scalar = 5

    res = A + scalar
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)

    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 11)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 11)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Broadcasting Case
def test12():
    A = Tensor('a', (30, 1))
    B = Tensor('b', (1, 30))

    res = A + B
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)

    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 12)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 12)")
    PrintCCode(new_res_with_ir.compute)

################################################################################################################################################## Reduction Operation
def test13():
    A = Tensor('a', (30, 30))

    res = A.sum(axis=0)
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)

    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 13)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 13)")
    PrintCCode(new_res_with_ir.compute)

##################################################################################################################################################
def test14():
    A = Tensor('a', (20, 30))
    B = Tensor('b', (30, 40))
    C = Tensor('c', (20, 40))
    D = Tensor('d', (40, 40))

    res1 = A + B # 20, 40
    res2 = C + D # 20, 40
    res = res1 + res2
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)
    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 14)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 14)")
    PrintCCode(new_res_with_ir.compute)

##################################################################################################################################################
def test15():
    A = Tensor('a', (20, 30))
    B = Tensor('b', (30, 40))
    C = Tensor('c', (20, 40))
    D = Tensor('d', (40, 40))

    res1 = A // B # 20, 40
    res2 = C + D # 20, 40
    res = res1 + res2
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)
    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 15)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 15)")
    PrintCCode(new_res_with_ir.compute)

##################################################################################################################################################
def test16():
    A = Tensor('a', (20, 30))
    B = Tensor('b', (30, 40))
    C = Tensor('c', (20, 40))
    D = Tensor('d', (40, 40))

    res1 = A // B # 20, 40
    res2 = C * D # 20, 40
    res = res1 + res2
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)
    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 16)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 16)")
    PrintCCode(new_res_with_ir.compute)

##################################################################################################################################################
def test17():
    A = Tensor('a', (20, 30))
    B = Tensor('b', (30, 40))
    C = Tensor('c', (20, 40))
    D = Tensor('d', (40, 40))

    res1 = A @ B # 20, 40
    res2 = C @ D # 20, 40
    res = res1 + res2
    res_with_ir = gen_ir(res)
    code = codegen.cpu.gen_cpp(res_with_ir)
    print("===============================================================> res_with_ir [IR]")
    print(code)
    print("===============================================================>")
    new_res_with_ir = fuse(res_with_ir)

    print("==========================================================================================================>")
    print("===============================================================> Updated IR Complete (test 17)")
    code1 = codegen.cpu.gen_cpp(new_res_with_ir)
    print(code1)
    print("==========================================================================================================>")
    print("===============================================================> Updated IR Loops Only (test 17)")
    PrintCCode(new_res_with_ir.compute)